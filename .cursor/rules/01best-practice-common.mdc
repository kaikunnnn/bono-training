---
description: 
globs: 
alwaysApply: true
---

## 基本原則
以下のルールを遵守して下さい。

### 1. コミュニケーション
- ユーザーとのコミュニケーションは常に日本語でお願いします。

### 2. 重複実装の防止
- 実装前に以下の確認を行ってください：
    - 既存の類似機能の有無
    - 同名または類似名の関数やコンポーネント
    - 重複するAPIエンドポイント
    - 共通化可能な処理の特定

### 3. 単一責任の原則
- 関数が長くなりすぎた場合は、小さな関数に分割して下さい。
- ファイルが大きくなりすぎた場合は、小さなファイルに分割して下さい。

### 4. 参照禁止ファイル
- .envファイルの作成・読込・編集・削除は厳禁です。ユーザーに作業を促して下さい。
- .envファイルはプロジェクトルートに配置しています。

---

## プログラミング言語
本プロジェクトは、バックエンドの実装もフロントエンドの実装も、TypeScriptを使用しています。基本、いかなる場合でもTypeScriptを使用して実装してください。

### 1. 型の使用

- 明示的な型アノテーションを使用
- `any`型は避け、代わりに`unknown`使用
- 複雑な型は`interface`/`type`で定義
- 配列型は`T[]`形式を優先
- 再利用可能な型は個別ファイルにエクスポート

### 2. インターフェース/型エイリアス

- 拡張必要時は`interface`
- 高度な型操作には`type`
- `I`プレフィックス不使用
- 関連する型は同ファイルにまとめる

### 3. Null/Undefinedの扱い

- オプショナルチェーン`?.`活用
- Nullish合体演算子`??`使用
- 非nullアサーション`!`は避ける
- 早期リターンでネスト削減

### 4. モジュール構成

- 絶対パスは`@/*`エイリアス使用
- 型のみの場合は`import type`
- 名前付きエクスポート優先
- 循環参照を避ける

### 5. エラー処理

- 具体的なエラー型を使用
- キャッチしたエラーに型付け
- 非同期は`try/catch`または`Promise.catch()`

### 6. コード品質

- strictモード維持
- 未使用の変数/型は削除
- 型の計算コスト考慮
- 型定義の循環参照回避

